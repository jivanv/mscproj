class Nanosatellite;
class Battery;
class PayloadState;
class Window;
class SolarPanel;
class Memory;
class STX;
class C3D;

class Nanosatellite 
{
	Battery mainBattery;
	Memory memory;
	SolarPanel panel;
	STX stx;
	C3D c3d;
	Window saa;
	Window sunlight;
	Window localSunlight;
	Window timeHorizon;
		    
	Nanosatellite(Battery b, Memory m)
	{
    	mainBattery = b;
    	memory = m;
        panel = new SolarPanel(this);
        stx = new STX(this);
        c3d = new C3D(this);
        saa = new Window();
        sunlight = new Window();
        localSunlight = new Window();
        timeHorizon = new Window();
  	}
}

class C3D
{
    Nanosatellite nanosat;
    PayloadState state;
    
    C3D(Nanosatellite n)
    {
        nanosat = n;
        state = new PayloadState();
    }
    
    action turnOn{
	    eq(1, duration);
	}
	
	action turnOff{
	    eq(1, duration);
	}
	
	action consumePowerWhileOn {
	    eq(1, duration);
	}
	
	action runHouseKeepingModeBeforeCamera {
	    eq(1, duration);
	}
	
	action takePhoto {
	    eq(30, duration);
	}
	
	action runHouseKeepingModeBeforeRM {
	    eq(1, duration);
	}
	
	action measureRadiation {
	    eq(40, duration);
	}
}

class Battery extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Battery(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

class Memory extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Memory(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

// Time window for availability
class Window extends Timeline
{
    predicate Available {}
}

class PayloadState extends Timeline
{
	predicate On {}
	predicate Off {}
	predicate poweringUp {}
	predicate poweringDown {}	
}

class SolarPanel
{
    Nanosatellite nanosat;
	
	SolarPanel(Nanosatellite n)
	{
		nanosat = n;
	}
	
	action chargeBattery {
	    eq(1, duration);
	}
}

class STX
{
    Nanosatellite nanosat;
    Window window;
    
    STX(Nanosatellite n)
    {
        nanosat = n;
        window = new Window();
    }
    
    action downlinkData{
        eq(1, duration);
    }
}


// Actions

C3D::takePhoto
{
    contained_by(object.nanosat.timeHorizon.Available);
    met_by(object.runHouseKeepingModeBeforeCamera);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 691200);
    meets(effect object.turnOff);
    
    // this is to ensure it takes a photo of the ground station
   // starts(object.nanosat.uvtrx.downlink.window.Available);
    // taking the photo when not in eclipse
    contained_by(object.nanosat.sunlight.Available);
    // taking the photo when it is daylight locally
    contained_by(object.nanosat.localSunlight.Available);
}

C3D::measureRadiation
{
    contained_by(object.nanosat.timeHorizon.Available);
    contained_by(object.nanosat.saa.Available);
    met_by(object.runHouseKeepingModeBeforeRM);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 18432);
    meets(effect object.turnOff);
}

C3D::turnOn
{
    contained_by(object.nanosat.timeHorizon.Available);
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

C3D::turnOff
{
    contained_by(object.nanosat.timeHorizon.Available);
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

C3D::consumePowerWhileOn
{
    contained_by(object.nanosat.timeHorizon.Available);
    contained_by(object.state.On);
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 13, power.quantity);
    bool continueLoopC;
    if(continueLoopC) {
        meets(effect object.consumePowerWhileOn next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 13, p.quantity);
    }
}

C3D::runHouseKeepingModeBeforeCamera
{
    contained_by(object.nanosat.timeHorizon.Available);
    met_by(effect object.turnOn);
    meets(object.takePhoto);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 256);
}

C3D::runHouseKeepingModeBeforeRM
{
    contained_by(object.nanosat.timeHorizon.Available);
    met_by(effect object.turnOn);
    meets(object.measureRadiation);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 256);
}

SolarPanel::chargeBattery
{
    contained_by(object.nanosat.timeHorizon.Available);
    contained_by(condition object.nanosat.sunlight.Available);
  	bool continueLoopB;
    if(continueLoopB) {
        meets(effect object.chargeBattery next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.produce power);
        mulEq(duration, 133, power.quantity);
    }
}

STX::downlinkData
{
    contained_by(object.nanosat.timeHorizon.Available);
    contained_by(condition object.window.Available);
    bool continueLoopS;
    if(continueLoopS == true) {
        meets(effect object.downlinkData next);
        next.end <= 1500;
        starts(effect object.nanosat.memory.consume data);
        mulEq(duration, 786432, data.quantity);
        starts(effect object.nanosat.mainBattery.consume consumption);
        mulEq(duration, 453, consumption.quantity);
    }
}