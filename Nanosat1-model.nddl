class Nanosatellite;
class Battery;
class Camera;
class PayloadState;
class Window;
class SolarPanel;
class Memory;
class Transmitter;

class Nanosatellite 
{
	Battery mainBattery;
	Memory memory;
	Camera camera;
	SolarPanel panel;
	Transmitter transmitter;
		    
	Nanosatellite(Battery b, Memory m)
	{
    	mainBattery = b;
    	memory = m;
        camera = new Camera(this);
        panel = new SolarPanel(this);
        transmitter = new Transmitter(this);
  	}
}

// The battery

class Battery extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Battery(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

// The memory

class Memory extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Memory(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

// Time window for availability

class Window extends Timeline
{
    predicate Available {}
}

class PayloadState extends Timeline
{
	predicate On {}
	predicate Off {}
	predicate poweringUp {}
	predicate poweringDown {}	
}

class Camera
{
    Nanosatellite nanosat;
	PayloadState state;
	Window window;
	
	Camera(Nanosatellite n)
	{
		nanosat = n;
	    state = new PayloadState();
	    window = new Window();
	}
		
	action takePhoto{
    	eq(4, duration);
	}
	
	action turnOn{
	    eq(1, duration);
	}
	
	action turnOff{
	    eq(1, duration);
	}
	
	action consumePowerWhileOn {
	    eq(1, duration);
	}
}

class SolarPanel
{
    Nanosatellite nanosat;
	Window window;
	
	SolarPanel(Nanosatellite n)
	{
		nanosat = n;
	    window = new Window();
	}
	
	action chargeBattery {
	    eq(1, duration);
	}
}

class Transmitter
{
    Nanosatellite nanosat;
    Window window;
    
    Transmitter(Nanosatellite n)
    {
        nanosat = n;
        window = new Window();
    }
    
    action downlinkData{
        eq(1, duration);
    }
}

// Actions

Camera::takePhoto
{
    contained_by(condition object.state.On);
    contained_by(condition object.window.Available);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 50);
    meets(effect object.turnOff);
}

Camera::turnOn
{
    before(object.takePhoto);
    contained_by(condition object.window.Available);
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

Camera::turnOff
{
    after(object.takePhoto);
    contained_by(condition object.window.Available);
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

Camera::consumePowerWhileOn
{
    starts(effect object.nanosat.mainBattery.consume p);
    eq(p.quantity, 8);
    contained_by(condition object.state.On);
    bool continueLoopC;
    if(continueLoopC) {
        meets(effect object.consumePowerWhileOn next);
        next.end <= 100;
        starts(effect object.nanosat.mainBattery.consume p);
        eq(p.quantity, 8);
    }
}

SolarPanel::chargeBattery
{
    contained_by(condition object.window.Available);
  	bool continueLoopB;
    if(continueLoopB) {
        meets(effect object.chargeBattery next);
        next.end <= 100;
        starts(effect object.nanosat.mainBattery.produce power);
        eq(power.quantity, 4);
    }
}

Transmitter::downlinkData
{
    contained_by(condition object.window.Available);
    bool continueLoop;
    if(continueLoop) {
        meets(effect object.downlinkData next);
        next.end <= 100;
        starts(effect object.nanosat.memory.consume data);
        eq(data.quantity, 10);
        starts(effect object.nanosat.mainBattery.consume consumption);
        eq(consumption.quantity, 5);
    }
}