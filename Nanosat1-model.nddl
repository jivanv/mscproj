class Nanosatellite;
class Battery;
class Camera;
class PayloadState;
class Window;
class SolarPanel;
class Memory;
class Transmitter;
class C3D;
class RadiationMonitor;
class TOPCAT;
class MIC;
class FUNCUBE;
class Comms;
class JANUS;

class Nanosatellite 
{
	Battery mainBattery;
	Memory memory;
	SolarPanel panel;
	Transmitter transmitter;
	C3D c3d;
	TOPCAT topcat;
	MIC mic;
	FUNCUBE funcube2;
	JANUS janus;
		    
	Nanosatellite(Battery b, Memory m)
	{
    	mainBattery = b;
    	memory = m;
        panel = new SolarPanel(this);
        transmitter = new Transmitter(this);
        c3d = new C3D(this);
        topcat = new TOPCAT(this);
        mic = new MIC(this);
        funcube2 = new FUNCUBE(this);
        janus = new JANUS(this);
  	}
}

class C3D
{
    Nanosatellite nanosat;
    Camera camera;
    RadiationMonitor rm;
    PayloadState state;
    Window window;
    
    C3D(Nanosatellite n)
    {
        nanosat = n;
        camera = new Camera(this);
        rm = new RadiationMonitor(this);
        state = new PayloadState();
        window = new Window();
    }
    
    action turnOn{
	    eq(1, duration);
	}
	
	action turnOff{
	    eq(1, duration);
	}
	
	action consumePowerWhileOn {
	    eq(1, duration);
	}
	
	action runHouseKeepingModeBeforeCamera {
	    eq(1, duration);
	}
	
	action takePhoto {
	    eq(30, duration);
	}
	
	action runHouseKeepingModeBeforeRM {
	    eq(1, duration);
	}
	
	action measureRadiation {
	    eq(40, duration);
	}
}

class TOPCAT
{
    Nanosatellite nanosat;
    PayloadState state;
    
    TOPCAT(Nanosatellite n)
    {
        nanosat = n;
        state = new PayloadState();
    }
    
    action turnOn{
	    eq(15, duration);
	}
	
	action turnOff{
	    eq(1, duration);
	}
	
	action consumePowerWhileOn {
	    eq(1, duration);
	}
	
	action runExperiment {
	    eq(40, duration);
	}
}

class MIC
{
    Nanosatellite nanosat;
    PayloadState state;
    
    MIC(Nanosatellite n)
    {
        nanosat = n;
        state = new PayloadState();
    }
    
    action turnOn{
	    eq(1, duration);
	}
	
	action turnOff{
	    eq(1, duration);
	}
	
	action consumePowerWhileOn {
	    eq(1, duration);
	}
	
	action runExperiment {
	    eq(15, duration);
	}
}

class FUNCUBE
{
    Nanosatellite nanosat;
    Comms education;
    Comms amateur;
    
    FUNCUBE(Nanosatellite n)
    {
        nanosat = n;
        education = new Comms();
        amateur = new Comms();
    }
    
    action communicateEducation {
        eq(1, duration);
    }
    
    action communicateAmateur {
        eq(1, duration);
    }
}

class Comms
{
    Window window;
    
    Comms()
    {
        window = new Window();
    }
}

class JANUS
{
    Nanosatellite nanosat;
    
    JANUS(Nanosatellite n)
    {
        nanosat = n;
    }
    
    action runExperimentLowPower {
        eq(1, duration);
    }
    
    action runExperimentHighPower {
        eq(1, duration);
    }
}

// The battery

class Battery extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Battery(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

// The memory

class Memory extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Memory(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

// Time window for availability

class Window extends Timeline
{
    predicate Available {}
}

class PayloadState extends Timeline
{
	predicate On {}
	predicate Off {}
	predicate poweringUp {}
	predicate poweringDown {}	
}

class Camera
{
    C3D c3d;
	PayloadState state;
	Window window;
	
	Camera(C3D c)
	{
		c3d = c;
	    window = new Window();
	}
		
	action takePhoto{
    	eq(30, duration);
	}
}

class RadiationMonitor
{
    C3D c3d;
	PayloadState state;
	Window window;
	
	RadiationMonitor(C3D c)
	{
		c3d = c;
	    window = new Window();
	}

}

class SolarPanel
{
    Nanosatellite nanosat;
	Window window;
	
	SolarPanel(Nanosatellite n)
	{
		nanosat = n;
	    window = new Window();
	}
	
	action chargeBattery {
	    eq(1, duration);
	}
}

class Transmitter
{
    Nanosatellite nanosat;
    Window window;
    
    Transmitter(Nanosatellite n)
    {
        nanosat = n;
        window = new Window();
    }
    
    action downlinkData{
        eq(1, duration);
    }
}

// Actions

C3D::takePhoto
{
    equals(object.camera.takePhoto);
    met_by(object.runHouseKeepingModeBeforeCamera);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 691200);
}

Camera::takePhoto
{
    contained_by(condition object.window.Available);
}

C3D::measureRadiation
{
    met_by(object.runHouseKeepingModeBeforeRM);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 18432);
}

C3D::turnOn
{
    contained_by(condition object.window.Available);
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

C3D::turnOff
{
    contained_by(condition object.window.Available);
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

C3D::consumePowerWhileOn
{
    contained_by(condition object.window.Available);
    contained_by(object.state.On);
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 13, power.quantity);
    bool continueLoopC;
    if(continueLoopC) {
        meets(effect object.consumePowerWhileOn next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 13, p.quantity);
    }
}

C3D::runHouseKeepingModeBeforeCamera
{
    meets(object.takePhoto);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 256);
}

C3D::runHouseKeepingModeBeforeRM
{
    contained_by(condition object.nanosat.mic.state.Off);
    meets(object.measureRadiation);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 256);
}

TOPCAT::turnOn
{
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

TOPCAT::turnOff
{
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

TOPCAT::consumePowerWhileOn
{
    contained_by(object.state.On);
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 29, power.quantity);
    bool continueLoopT;
    if(continueLoopT) {
        meets(effect object.consumePowerWhileOn next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 29, p.quantity);
    }
}

TOPCAT::runExperiment
{
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 204800);
}

MIC::turnOn
{
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

MIC::turnOff
{
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

MIC::consumePowerWhileOn
{
    contained_by(object.state.On);
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 63, power.quantity);
    bool continueLoopM;
    if(continueLoopM) {
        meets(effect object.consumePowerWhileOn next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 63, p.quantity);
    }
}

MIC::runExperiment
{
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 34816);
}

FUNCUBE::communicateEducation
{
    contained_by(condition object.education.window.Available);
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 22, power.quantity);
    bool continueLoopFE;
    if(continueLoopFE) {
        meets(effect object.communicateEducation next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 22, p.quantity);
    }
}

FUNCUBE::communicateAmateur
{
    contained_by(condition object.amateur.window.Available);
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 21, power.quantity);
    bool continueLoopFA;
    if(continueLoopFA) {
        meets(effect object.communicateAmateur next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 21, p.quantity);
    }
}

JANUS::runExperimentLowPower
{
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 22, power.quantity);
    bool continueLoopJL;
    if(continueLoopJL) {
        meets(effect object.runExperimentLowPower next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 22, p.quantity);
    }
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 512);
}

JANUS::runExperimentHighPower
{
    starts(effect object.nanosat.mainBattery.consume power);
    mulEq(duration, 120, power.quantity);
    bool continueLoopJH;
    if(continueLoopJH) {
        meets(effect object.runExperimentHighPower next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.consume p);
        mulEq(duration, 120, p.quantity);
    }
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 512);
}

SolarPanel::chargeBattery
{
    contained_by(condition object.window.Available);
  	bool continueLoopB;
    if(continueLoopB) {
        meets(effect object.chargeBattery next);
        next.end <= 1500;
        starts(effect object.nanosat.mainBattery.produce power);
        mulEq(duration, 133, power.quantity);
    }
}

Transmitter::downlinkData
{
    contained_by(condition object.window.Available);
    bool continueLoop;
    if(continueLoop == true) {
        meets(effect object.downlinkData next);
        next.end <= 1500;
        starts(effect object.nanosat.memory.consume data);
        mulEq(duration, 72000, data.quantity);
        starts(effect object.nanosat.mainBattery.consume consumption);
        mulEq(duration, 453, consumption.quantity);
    }
}