class Nanosatellite;
class Battery;
class PayloadState;
class Window;
class SolarPanel;
class Memory;
class STX;
class C3D;
class Camera;
class RadiationMonitor;
class TOPCAT;
class JANUS;
class MIC;
class FUNCUBE;
class UVTRX;
class ConstantlyActivePayload;

class Nanosatellite 
{
	Battery mainBattery;
	Memory memory;
	SolarPanel panel;
	STX stx;
	C3D c3d;
	TOPCAT topcat;
	JANUS janus;
	MIC mic;
	FUNCUBE funcube2;
	UVTRX uvtrx;
	ConstantlyActivePayload constantpayloads;
		    
	Nanosatellite(Battery b, Memory m)
	{
    	mainBattery = b;
    	memory = m;
        panel = new SolarPanel(this);
        stx = new STX(this);
        c3d = new C3D(this);
        topcat = new TOPCAT(this);
        janus = new JANUS(this);
        mic = new MIC(this);
        funcube2 = new FUNCUBE(this);
        uvtrx = new UVTRX(this);
        constantpayloads = new ConstantlyActivePayload(this, 53.4);
  	}
}

class C3D
{
    Nanosatellite nanosat;
    Camera camera;
    RadiationMonitor rm;
    
    C3D(Nanosatellite n)
    {
        nanosat = n;
        camera = new Camera(this);
        rm = new RadiationMonitor(this);
    }
}

class Camera
{
    Window window;
    PayloadState state;
    C3D c3d;
    
    Camera(C3D c)
    {
        c3d = c;
        window = new Window();
        state = new PayloadState();
    }
    
    action turnOnC3D {
	    eq(1, duration);
	}
	
	action turnOffC3D {
	    eq(1, duration);
	}
	
	action consumePowerWhileOnC3DCam {
	    eq(1, duration);
	}
	
	action runHouseKeepingMode {
	    eq(1, duration);
	}
	
	action takePhoto {
	    eq(30, duration);
	}
}

class RadiationMonitor
{
    Window window;
    PayloadState state;
    C3D c3d;
    
    RadiationMonitor(C3D c)
    {
        c3d = c;
        window = new Window();
        state = new PayloadState();
    }
    
    action turnOnC3D {
	    eq(1, duration);
	}
	
	action turnOffC3D {
	    eq(1, duration);
	}
	
	action consumePowerWhileOnC3Drm {
	    eq(1, duration);
	}
	
	action runHouseKeepingMode {
	    eq(1, duration);
	}
	
	action measureRadiation {
	    eq(40, duration);
	}
}

class TOPCAT
{
    Nanosatellite nanosat;
    PayloadState state;
    
    TOPCAT(Nanosatellite n)
    {
        nanosat = n;
        state = new PayloadState();
    }
    
    action turnOnTOPCAT{
	    eq(15, duration);
	}
	
	action turnOffTOPCAT{
	    eq(1, duration);
	}
	
	action consumePowerWhileOnTOPCAT {
	    eq(1, duration);
	}
	
	action runExperimentTOPCAT {
	    eq(40, duration);
	}
}

class JANUS extends Timeline
{
    Nanosatellite nanosat;
    Window window;
    PayloadState state;
    
    JANUS(Nanosatellite n)
    {
        nanosat = n;
        window = new Window();
        state = new PayloadState();
    }
    
    action runExperimentLowPowerJANUS {
        eq(35, duration);
    }
    
    action runExperimentHighPowerJANUS {
        eq(20, duration);
    }
    
    action consumePowerWhileRunningLowJANUS {
        eq(1, duration);
    }
    
    action consumePowerWhileRunningHighJANUS {
        eq(1, duration);
    }
}

class MIC
{
    Nanosatellite nanosat;
    PayloadState state;
    
    MIC(Nanosatellite n)
    {
        nanosat = n;
        state = new PayloadState();
    }
    
    action turnOnMIC{
	    eq(1, duration);
	}
	
	action turnOffMIC{
	    eq(1, duration);
	}
	
	action consumePowerWhileOnMIC {
	    eq(1, duration);
	}
	
	action runExperimentMIC {
	    eq(15, duration);
	}
}

class ConstantlyActivePayload
{
    Nanosatellite nanosat;
    float consumptionRate;
    
    ConstantlyActivePayload(Nanosatellite n, float r)
    {
        nanosat = n;
        consumptionRate = r;
    }
    
    action alwaysOn {
        eq(1, duration);
    }
}

class FUNCUBE
{
    Nanosatellite nanosat;
    Window educationWindow;
    Window amateurWindow;
    
    FUNCUBE(Nanosatellite n)
    {
        nanosat = n;
        educationWindow = new Window();
        amateurWindow = new Window();
    }
    
    action educationalCommunicationsFUNCUBE {
        eq(1, duration);
    }
    
    action amateurCommunicationsFUNCUBE {
        eq(1, duration);
    }
}

class Battery extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Battery(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

class Memory extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, min, max
	Memory(float ic, float min, float max)
	{
		super(ic, min, max);
		profileType="IncrementalFlowProfile";
	}
}

// Time window for availability
class Window extends Timeline
{
    predicate Available {}
}

class PayloadState extends Timeline
{
	predicate On {}
	predicate Off {}
	predicate poweringUp {}
	predicate poweringDown {}	
}

class SolarPanel
{
    Nanosatellite nanosat;
    Window window;
	
	SolarPanel(Nanosatellite n)
	{
		nanosat = n;
		window = new Window();
	}
	
	action chargeBattery {
	    eq(1, duration);
	}
}

class STX
{
    Nanosatellite nanosat;
    Window window;
    
    STX(Nanosatellite n)
    {
        nanosat = n;
        window = new Window();
    }
    
    action downlinkData{
        eq(1, duration);
    }
}


class UVTRX
{
    Nanosatellite nanosat;
    Window beaconWindow;
    Window downlinkWindow;
    
    UVTRX(Nanosatellite n)
    {
        nanosat = n;
        downlinkWindow = new Window();
        beaconWindow = new Window();
    }
    
    action downlinkData{
        eq(1, duration);
    }
    
    action beaconSignal{
        eq(1, duration);
    }
}

// Actions

Camera::takePhoto
{
    starts(object.c3d.nanosat.uvtrx.downlinkWindow.Available);
    contained_by(object.window.Available);
    contained_by(condition object.state.On);
    met_by(object.runHouseKeepingMode);
    meets(effect object.turnOffC3D);
    starts(effect object.c3d.nanosat.memory.produce data);
    eq(data.quantity, 691200);
}

Camera::turnOnC3D
{
    contained_by(object.window.Available);
    met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
	meets(object.runHouseKeepingMode);
}

Camera::turnOffC3D
{
    contained_by(object.window.Available);
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
	met_by(object.takePhoto);
}

Camera::runHouseKeepingMode
{
    contained_by(object.window.Available);
    contained_by(condition object.state.On);
    met_by(object.turnOnC3D);
    meets(object.takePhoto);
    starts(effect object.c3d.nanosat.memory.produce data);
    eq(data.quantity, 256);
    starts(effect object.c3d.nanosat.mainBattery.consume power);
    eq(power.quantity, 54);
}

Camera::consumePowerWhileOnC3DCam
{
    contained_by(condition object.window.Available);
    contained_by(condition object.state.On);
    bool continueLoopC;
    if(continueLoopC) {
        meets(effect object.consumePowerWhileOnC3DCam next);
        next.end <= 1440;
        starts(effect object.c3d.nanosat.mainBattery.consume p);
        eq(p.quantity, 54);
    }
}

RadiationMonitor::measureRadiation
{
    starts_during(object.window.Available);
    contained_by(condition object.state.On);
    met_by(object.runHouseKeepingMode);
    meets(effect object.turnOffC3D);
    starts(effect object.c3d.nanosat.memory.produce data);
    eq(data.quantity, 18432);
}

RadiationMonitor::turnOnC3D
{
    met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
	meets(object.runHouseKeepingMode);
}

RadiationMonitor::turnOffC3D
{
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
	met_by(object.measureRadiation);
}

RadiationMonitor::runHouseKeepingMode
{
    contained_by(condition object.state.On);
    met_by(object.turnOnC3D);
    meets(object.measureRadiation);
    starts(effect object.c3d.nanosat.memory.produce data);
    eq(data.quantity, 256);
    starts(effect object.c3d.nanosat.mainBattery.consume power);
    eq(power.quantity, 54);
}

RadiationMonitor::consumePowerWhileOnC3Drm
{
    contained_by(condition object.state.On);
    bool continueLoopRM;
    if(continueLoopRM) {
        meets(effect object.consumePowerWhileOnC3Drm next);
        next.end <= 1440;
        starts(effect object.c3d.nanosat.mainBattery.consume p);
        eq(p.quantity, 54);
    }
}

TOPCAT::turnOnTOPCAT
{
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

TOPCAT::turnOffTOPCAT
{
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

TOPCAT::consumePowerWhileOnTOPCAT
{
    contained_by(object.state.On);
    bool continueLoopT;
    if(continueLoopT) {
        meets(effect object.consumePowerWhileOnTOPCAT next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, 96);
    }
}

TOPCAT::runExperimentTOPCAT
{
    met_by(object.turnOnTOPCAT);
    meets(object.turnOffTOPCAT);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 204800);
}

JANUS::runExperimentLowPowerJANUS
{
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 512);
}

JANUS::consumePowerWhileRunningLowJANUS
{
    contained_by(object.runExperimentLowPowerJANUS);
    bool continueLoopJL;
    if(continueLoopJL) {
        meets(effect object.consumePowerWhileRunningLowJANUS next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, 46.8);
    }
}

JANUS::runExperimentHighPowerJANUS
{
    contained_by(condition object.nanosat.topcat.state.Off);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 512);
}

JANUS::consumePowerWhileRunningHighJANUS
{
    contained_by(object.runExperimentHighPowerJANUS);
    contained_by(object.window.Available);
    bool continueLoopJH;
    if(continueLoopJH) {
        meets(effect object.consumePowerWhileRunningHighJANUS next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, 144);
    }
}

MIC::turnOnMIC
{
    contained_by(condition object.nanosat.c3d.camera.state.Off);
    contained_by(condition object.nanosat.c3d.rm.state.Off);
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

MIC::turnOffMIC
{
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

MIC::consumePowerWhileOnMIC
{
    contained_by(object.state.On);
    bool continueLoopM;
    if(continueLoopM) {
        meets(effect object.consumePowerWhileOnMIC next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, 60);
    }
}

MIC::runExperimentMIC
{
    contained_by(condition object.nanosat.c3d.camera.state.Off);
    contained_by(condition object.nanosat.c3d.rm.state.Off);
    met_by(object.turnOnMIC);
    meets(object.turnOffMIC);
    contained_by(condition object.state.On);
    starts(effect object.nanosat.memory.produce data);
    eq(data.quantity, 34816);
}

FUNCUBE::educationalCommunicationsFUNCUBE
{
    contained_by(condition object.educationWindow.Available);
    bool continueLoopFE;
    if(continueLoopFE) {
        meets(effect object.educationalCommunicationsFUNCUBE next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, 60.84);
    }
}

FUNCUBE::amateurCommunicationsFUNCUBE
{
    contained_by(condition object.amateurWindow.Available);
    bool continueLoopFA;
    if(continueLoopFA) {
        meets(effect object.amateurCommunicationsFUNCUBE next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, 58.2);
    }
}

ConstantlyActivePayload::alwaysOn
{
    bool continueLoopCAP;
    if(continueLoopCAP) {
        meets(effect object.alwaysOn next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume power);
        eq(power.quantity, object.consumptionRate);
    }
}

SolarPanel::chargeBattery
{
    contained_by(condition object.window.Available);
  	bool continueLoopB;
    if(continueLoopB) {
        meets(effect object.chargeBattery next);
        next.end <= 1440;
        contains(effect object.nanosat.mainBattery.produce power);
        eq(power.quantity, 390);
    }
}

STX::downlinkData
{
    contained_by(condition object.window.Available);
    bool continueLoopS;
    if(continueLoopS) {
        meets(effect object.downlinkData next);
        next.end <= 1440;
        starts(effect object.nanosat.memory.consume data);
        eq(data.quantity, 78643);
        starts(effect object.nanosat.mainBattery.consume consumption);
        eq(consumption.quantity, 326.4);
    }
}

UVTRX::downlinkData
{
    contained_by(condition object.downlinkWindow.Available);
    bool continueLoopUD;
    if(continueLoopUD) {
        meets(effect object.downlinkData next);
        next.end <= 1440;
        starts(effect object.nanosat.memory.consume data);
        eq(data.quantity, 72000);
        starts(effect object.nanosat.mainBattery.consume consumption);
        eq(consumption.quantity, 23.4);
    }
}

UVTRX::beaconSignal
{
    contained_by(condition object.beaconWindow.Available);
    bool continueLoopUB;
    if(continueLoopUB) {
        meets(effect object.beaconSignal next);
        next.end <= 1440;
        starts(effect object.nanosat.mainBattery.consume consumption);
        eq(consumption.quantity, 17.7);
    }
}