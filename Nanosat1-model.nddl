class Nanosatellite;
class Battery;
class Camera;
class CameraState;
class Window;
class SolarPanel;
class SolarPanelState;

class Nanosatellite 
{
	Battery mainBattery;
	Camera camera;
	SolarPanel panel;
    
	Nanosatellite(Battery b)
	{
    	mainBattery = b;
        camera = new Camera(this);
        panel = new SolarPanel(this);
  	}
  	  	
	action takePhoto {}
	action chargeBattery {}
}

// The battery

class Battery extends Reservoir
{
    string profileType;
    
    // ic = initial capacity, level limit min, level limit max, production max, consumption max
	Battery(float ic, float lmin, float lmax, float pmax, float pmin)
	{
		super(ic, lmin, lmax, pmax, pmin);
		profileType="IncrementalFlowProfile";
	}
}

// Time window for availability

class Window extends Timeline
{
    predicate Available {}
}

// The camera

class CameraState extends Timeline
{
	predicate On {}
	predicate Off {}
	predicate poweringUp {}
	predicate poweringDown {}	
}

class Camera
{
    Nanosatellite nanosat;
	CameraState state;
	Window window;
	
	Camera(Nanosatellite n)
	{
		nanosat = n;
	    state = new CameraState();
	    window = new Window();
	}
		
	action takePhoto{
    	eq(1, duration);
	}
	
	action turnOn{
	    eq(2, duration);
	}
	
	action turnOff{
	    eq(2, duration);
	}
	
	action consumePowerWhileOn {}
}

// The solar panel

class SolarPanelState extends Timeline
{
	predicate Charging {}
}

class SolarPanel
{
    Nanosatellite nanosat;
	SolarPanelState state;
	Window window;
	
	Camera(Nanosatellite n)
	{
		nanosat = n;
	    state = new SolarPanelState();
	    window = new Window();
	}
	
	action chargeBattery {}
}

// Actions

Nanosatellite::takePhoto
{
	equals(object.camera.takePhoto);
}

Nanosatellite::chargeBattery
{
   equals(object.panel.chargeBattery);
}

Camera::takePhoto
{
    contained_by(condition object.state.On);
    contained_by(condition object.window.Available);
}

Camera::turnOn
{
	met_by(condition object.state.Off);
	equals(effect object.state.poweringUp);
	meets(effect object.state.On);
}

Camera::turnOff
{
	met_by(condition object.state.On);
	equals(effect object.state.poweringDown);
	meets(effect object.state.Off);
}

Camera::consumePowerWhileOn
{
    contained_by(object.state.On);
    starts(object.nanosat.mainBattery.consume consumption);
    eq(consumption.quantity, 120);
}

SolarPanel::chargeBattery
{
    contained_by(condition object.window.Available);
    starts(effect object.nanosat.mainBattery.produce power);
  	eq(power.quantity, 50);
}